import React, { useState, useEffect, useMemo, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, onSnapshot, runTransaction, serverTimestamp, collection, query, limit, orderBy, getDoc, getDocs, writeBatch } from 'firebase/firestore';
import { Heart, Zap, ChevronsUp, RefreshCw, XCircle, Clock, CheckCircle, RotateCcw, Image as ImageIcon, Trash2, RotateCcw as UndoIcon } from 'lucide-react';

// --- КОНСТАНТИ ГРИ ---

const LEVELS = [
  { name: 'Пупка (Початкова Молекула)', minXp: 0, maxXp: 100, description: 'Маленька, але жвава істота' },
  { name: 'Мікроорганізм', minXp: 101, maxXp: 250, description: 'Починає рухатись і світитись' },
  { name: 'Клітинка Життя', minXp: 251, maxXp: 500, description: 'Має силу й форму' },
  { name: 'Маленьке Звірятко', minXp: 501, maxXp: 900, description: 'Починає проявляти характер' },
  { name: 'Людинка-Пупка', minXp: 901, maxXp: 1500, description: 'Справжній герой — досяг гармонії' },
  { name: 'Вища форма (Новий Світ)', minXp: 1501, maxXp: 9999, description: 'Досягнута нова, невідома форма!' },
];

const MAX_HEALTH = 7; 

const REWARDS = [
  { id: 'base', name: '🏃‍♂️ Базове тренування (20+ хв)', xp: 10 },
  { id: 'rain', name: '🌧️ Погана погода / Дощ', xp: 5, isBonus: true },
  { id: 'run5k', name: '🏃‍♀️ 5 км бігу', xp: 10 },
  { id: 'run10k', name: '🏃 10 км бігу', xp: 25 },
  { id: 'run15k', name: '🦿 15 км бігу', xp: 50 },
  { id: 'squat150', name: '🏋️ 150 присідань', xp: 10 },
  { id: 'squat300', name: '🏋️‍♂️ 300 присідань', xp: 25 },
  { id: 'squat600', name: '🏋️‍♀️ 600 присідань', xp: 50 },
  { id: 'squat1000', name: '💪 1000 присідань', xp: 100 },
  { id: 'pullup50', name: '🪜 50 підтягувань (для нього)', xp: 5 },
  { id: 'pullup100', name: '🧗 100 підтягувань (для нього)', xp: 10 },
  { id: 'menstrual', name: '🩸 Тренування під час місячних (для неї)', xp: 5, isBonus: true },
  { id: 'walk3k', name: '🚶 Прогулянка 3+ км', xp: 5 },
  { id: 'yoga', name: '🧘 Розтяжка / Йога (30 хв)', xp: 10 },
  { id: 'early', name: '🌅 Ранкове тренування до 8:00', xp: 5, isBonus: true },
  { id: 'fasted', name: '🍽️ Біг натщесерце', xp: 5, isBonus: true },
  { id: 'together', name: '🤝 Спільне тренування', xp: 10, isBonus: true },
  { id: 'reading', name: '📚 Читання книги (30 хв)', xp: 5 },
];

const MULTIPLIER = { id: 'gymX2', name: '⭐ Додаткове тренування у спортзалі (×2 XP)', factor: 2 };

const HEALING_TASKS = [
    { id: 'heal_squat500', name: '🏋️‍♂️ 500 присідань' },
    { id: 'heal_water', name: '💧 Пити 2.5 л води (3 дні поспіль)' },
    { id: 'heal_meditate', name: '🧘 Розтяжка 30 хв (5 днів поспіль)' }, 
    { id: 'heal_diet', name: '🚫 Тиждень без солодкого/фастфуду (7 днів)' },
    { id: 'heal_nodopamine', name: '📵 24 години без легкого дофаміну (Соцмережі/Ігри)' },
];

const PENALTIES = [
    { id: 'skip', name: 'Пропуск тренування', health: -1, xp: 0 },
    { id: 'no_evolve', name: 'Два тижні без еволюції', health: -2, xp: 0 },
    { id: 'no_circle', name: 'Без "кружечку" (відеозвіту)', health: 0, xp: -10 },
];

// --- ДОПОМІЖНІ КОМПОНЕНТИ ---

const Button = ({ children, onClick, color = 'bg-indigo-600', icon: Icon, disabled, className = '' }) => (
  <button
    onClick={onClick}
    disabled={disabled}
    className={`flex items-center justify-center p-3 rounded-xl text-white font-semibold transition-all duration-200 shadow-lg ${color} hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed ${className}`}
  >
    {Icon && <Icon className='w-5 h-5 mr-2' />}
    {children}
  </button>
);

const HeartDisplay = ({ current, max }) => (
  <div className="flex flex-wrap justify-center gap-1">
    {[...Array(max)].map((_, i) => (
      <Heart
        key={i}
        className={`w-6 h-6 transition-colors duration-300 ${i < current ? 'fill-red-500 text-red-500' : 'fill-gray-300 text-gray-400'}`}
      />
    ))}
  </div>
);

// --- ОСНОВНИЙ КОМПОНЕНТ ДОДАТКУ ---

const App = () => {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [isDead, setIsDead] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [showResetModal, setShowResetModal] = useState(false);
  const [statusMessage, setStatusMessage] = useState(null); // Для повідомлень про помилки завантаження

  // Стан гри
  const [xp, setXp] = useState(0);
  const [health, setHealth] = useState(MAX_HEALTH);
  const [history, setHistory] = useState([]);
  const [characterBase64, setCharacterBase64] = useState(''); // Використовуємо Base64 для зображення
  const [lastActionId, setLastActionId] = useState(null); // ID останньої дії
  const [showImageInput, setShowImageInput] = useState(false); 

  const [showHealOptions, setShowHealOptions] = useState(false);
  const [showPenaltyOptions, setShowPenaltyOptions] = useState(false);

  // Стан для форми додавання XP
  const [selectedActivities, setSelectedActivities] = useState([]);
  const [hasMultiplier, setHasMultiplier] = useState(false);
  
  // Ref для поля вводу зображення
  const imageInputRef = useRef(null);

  // Firestore path constants
  const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
  const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
  const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

  // Константа для унікального ID документа стану гри
  const GAME_DOC_ID = 'main_pupka_data';
  // Стандартне зображення Пупки
  const DEFAULT_PUPKA_IMAGE_URL = 'image_915fcc.jpg';


  // 1. Ініціалізація Firebase та Аутентифікація
  useEffect(() => {
    if (firebaseConfig) {
      try {
        const app = initializeApp(firebaseConfig);
        const firestore = getFirestore(app);
        const authInstance = getAuth(app);
        
        setDb(firestore);
        setAuth(authInstance);

        const unsubscribe = onAuthStateChanged(authInstance, async (user) => {
            if (user) {
                setUserId(user.uid);
            } else if (initialAuthToken) {
                await signInWithCustomToken(authInstance, initialAuthToken);
            } else {
                const anonymousUser = await signInAnonymously(authInstance);
                setUserId(anonymousUser.user.uid);
            }
            setIsAuthReady(true);
        });

        return () => unsubscribe();
      } catch (error) {
        console.error("Помилка ініціалізації Firebase:", error);
      }
    } else {
      console.warn("Firebase config не надано. Дані не будуть збережені.");
      setUserId('anon-local');
      setIsAuthReady(true);
    }
  }, [firebaseConfig, initialAuthToken]);

  // 2. Слухач Firestore для отримання стану гри
  useEffect(() => {
    if (db && userId) {
      const stateDocRef = doc(db, `artifacts/${appId}/users/${userId}/pupka_game/${GAME_DOC_ID}`);
      const historyColRef = collection(stateDocRef, 'history');
      
      // Listener для стану
      const unsubscribeState = onSnapshot(stateDocRef, (docSnap) => {
        if (docSnap.exists()) {
          const data = docSnap.data();
          
          const newHealth = data.health !== undefined && data.health !== null ? data.health : MAX_HEALTH;

          setXp(data.xp || 0);
          setHealth(newHealth);
          setIsDead(newHealth <= 0); 
          setCharacterBase64(data.characterBase64 || '');
          setLastActionId(data.lastActionId || null); 
        } else {
          // Ініціалізація нового стану, якщо документ не існує
          setXp(0);
          setHealth(MAX_HEALTH);
          setIsDead(false);
          setCharacterBase64('');
          setLastActionId(null);
          if (userId !== 'anon-local') {
            setDoc(stateDocRef, { xp: 0, health: MAX_HEALTH, characterBase64: '', lastActionId: null, createdAt: serverTimestamp() }, { merge: true })
              .catch(e => console.error("Помилка ініціалізації стану:", e));
          }
        }
      }, (error) => {
        console.error("Помилка onSnapshot (state):", error);
      });

      // Listener для історії (останні 10 записів)
      const q = query(historyColRef, orderBy('timestamp', 'desc'), limit(10));
      const unsubscribeHistory = onSnapshot(q, (snapshot) => {
        const newHistory = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
        }));
        setHistory(newHistory);
      }, (error) => {
        console.error("Помилка onSnapshot (history):", error);
      });

      return () => {
        unsubscribeState();
        unsubscribeHistory();
      };
    }
  }, [db, userId, appId, GAME_DOC_ID]);

  // 3. Focus on Image Input when it appears
  useEffect(() => {
    if (showImageInput && imageInputRef.current) {
        imageInputRef.current.focus();
    }
  }, [showImageInput]);

  // --- ОБЧИСЛЕННЯ СТАНУ ГРИ ---

  const currentLevel = useMemo(() => {
    return LEVELS.find(l => xp >= l.minXp && xp <= l.maxXp) || LEVELS[0];
  }, [xp]);

  const nextLevel = useMemo(() => {
    const currentIndex = LEVELS.findIndex(l => l.name === currentLevel.name);
    return LEVELS[currentIndex + 1] || currentLevel;
  }, [currentLevel]);

  const xpProgress = useMemo(() => {
    if (currentLevel.maxXp === nextLevel.maxXp) return 100;
    const range = nextLevel.minXp - currentLevel.minXp;
    const progress = xp - currentLevel.minXp;
    return Math.min(100, (progress / range) * 100);
  }, [xp, currentLevel, nextLevel]);

  const xpToNextLevel = useMemo(() => {
    const nextMin = nextLevel.minXp;
    if (xp >= nextMin) {
        return nextLevel.maxXp - xp;
    }
    return nextMin - xp;
  }, [xp, nextLevel]);


  // --- ФУНКЦІЇ ОНОВЛЕННЯ СТАНУ ---

  const getDocRef = () => doc(db, `artifacts/${appId}/users/${userId}/pupka_game/${GAME_DOC_ID}`);
  const getHistoryColRef = () => collection(getDocRef(), 'history');

  /**
   * Додає запис до історії.
   * @param {string} type - Тип дії ('update', 'penalty', 'heal' тощо).
   * @param {object} details - Деталі дії.
   * @param {number} endHealth - Кінцеве здоров'я після дії.
   */
  const addHistoryEntry = async (type, details, endHealth) => {
    if (!db || userId === 'anon-local') return;
    try {
        const historyRef = doc(getHistoryColRef());
        await setDoc(historyRef, {
            type,
            details: {
                ...details,
                endHealth: endHealth, 
            },
            timestamp: serverTimestamp(),
        }, {merge: true}); 
        
        // Повертаємо ID новоствореного документа
        return historyRef.id;
    } catch (e) {
        console.error("Помилка додавання історії:", e);
        return null;
    }
  };

  /**
   * Оновлює стан гри (XP та Здоров'я).
   * @param {number} xpChange - Зміна XP.
   * @param {number | 'SET_TO_ONE'} healthUpdate - Зміна здоров'я, або спеціальна константа 'SET_TO_ONE' для оживлення.
   * @param {string} description - Опис дії для історії.
   * @param {string} type - Тип дії ('update', 'penalty', 'heal').
   */
  const updateGameState = async (xpChange, healthUpdate, description, type) => {
    if (!db || userId === 'anon-local' || isSaving) {
      console.warn("Не можу зберегти: DB не готова або вже зберігаю.");
      return;
    }
    
    setIsSaving(true);
    const docRef = getDocRef();

    try {
      let finalHealth = -1; // Для логування
      let historyId = null; // Для збереження ID історії

      await runTransaction(db, async (transaction) => {
        const docSnap = await transaction.get(docRef);
        
        let currentXp = 0;
        let currentHealth = MAX_HEALTH;
        let currentBase64 = '';
        let currentLastActionId = null;

        if (docSnap.exists()) {
          const data = docSnap.data();
          currentHealth = data.health !== undefined && data.health !== null ? data.health : MAX_HEALTH;
          currentXp = data.xp || 0;
          currentBase64 = data.characterBase64 || '';
          currentLastActionId = data.lastActionId || null;
        }
        
        // --- ЛОГІКА ОНОВЛЕННЯ ЗДОРОВ'Я ---
        let calculatedHealth;
        
        if (healthUpdate === 'SET_TO_ONE' && currentHealth <= 0) {
            calculatedHealth = 1;
        } else if (typeof healthUpdate === 'number') {
            calculatedHealth = Math.min(MAX_HEALTH, Math.max(0, currentHealth + healthUpdate));
        } else {
             calculatedHealth = currentHealth;
        }

        // --- ЛОГІКА ОНОВЛЕННЯ XP ---
        const calculatedXp = Math.max(0, currentXp + xpChange);
        
        // Оновлюємо стан isDead локально, щоб UI реагував швидко
        setIsDead(calculatedHealth <= 0); 
        finalHealth = calculatedHealth; // Записуємо кінцеве здоров'я
        
        // Тимчасово оновлюємо лише основний документ
        transaction.set(docRef, { 
          xp: calculatedXp, 
          health: calculatedHealth,
          characterBase64: currentBase64, 
          updatedAt: serverTimestamp(),
          level: currentLevel.name,
          // lastActionId: буде оновлено після створення історії
        }, { merge: true });
        
        // Повернемо об'єкт з деталями для подальшого створення історії
        return { 
            xpChange: xpChange, 
            healthChange: healthUpdate, 
            description: description,
            finalHealth: calculatedHealth,
            type: type
        };
      });
      
      // Створення запису історії після успішної транзакції
      const newHistoryId = await addHistoryEntry(type, { 
          xpChange: xpChange, 
          healthChange: healthUpdate, 
          description: description 
      }, finalHealth);

      // Оновлення основного документа новим lastActionId після успішного створення історії
      if (newHistoryId) {
          await setDoc(docRef, { lastActionId: newHistoryId }, { merge: true });
          setLastActionId(newHistoryId); // Оновлюємо локальний стан
      }
      
      console.log("Стан гри успішно оновлено.");

    } catch (e) {
      console.error("Помилка транзакції оновлення стану:", e);
      setStatusMessage({ type: 'error', text: 'Помилка оновлення стану. Перевірте консоль.' });
      setTimeout(() => setStatusMessage(null), 5000);
    } finally {
      setIsSaving(false);
    }
  };

  /**
   * Відміняє останню дію, використовуючи lastActionId.
   */
  const handleUndoLastAction = async () => {
    if (!lastActionId || isSaving || !db || userId === 'anon-local') {
      setStatusMessage({ type: 'warning', text: 'Неможливо відмінити: немає останньої дії або система зайнята.' });
      return;
    }

    setIsSaving(true);
    const docRef = getDocRef();
    const historyDocRef = doc(getHistoryColRef(), lastActionId);

    try {
      let description = '';
      let isCprUndo = false;
      
      // Виносимо отримання історії за межі транзакції
      const historySnap = await getDoc(historyDocRef);
      if (!historySnap.exists()) {
        setStatusMessage({ type: 'error', text: 'Помилка: запис історії не знайдено.' });
        // Очищаємо lastActionId, оскільки запис, на який він вказував, зник
        await setDoc(docRef, { lastActionId: null }, { merge: true });
        setLastActionId(null); 
        setIsSaving(false);
        return;
      }
      
      const historyData = historySnap.data();
      const details = historyData.details || {};
      
      const undoneXpChange = details.xpChange ? -details.xpChange : 0;
      let undoneHealthChange = 0;
      
      if (typeof details.healthChange === 'number') {
        undoneHealthChange = -details.healthChange;
      } else if (details.healthChange === 'SET_TO_ONE') {
        isCprUndo = true; // Позначаємо, що це відміна CPR
      }
      
      description = `ВІДМІНА: ${details.description || 'невідомої дії'}`;

      if (isCprUndo) {
        setStatusMessage({ type: 'error', text: 'Відміна «Штучного дихання» (CPR) не підтримується. Скиньте персонажа, якщо це необхідно.' });
        setIsSaving(false);
        return;
      }
      
      // 2. Транзакція: Відкат XP/Health, очищення lastActionId ТА видалення історії
      await runTransaction(db, async (transaction) => {
        const docSnap = await transaction.get(docRef);
        if (!docSnap.exists()) {
            throw new Error("Основний документ Pupka не знайдено.");
        }

        const data = docSnap.data();
        const currentXp = data.xp || 0;
        const currentHealth = data.health !== undefined && data.health !== null ? data.health : MAX_HEALTH;

        // Розрахунок нового стану
        const calculatedXp = Math.max(0, currentXp + undoneXpChange);
        const calculatedHealth = Math.min(MAX_HEALTH, Math.max(0, currentHealth + undoneHealthChange));
        
        // Оновлення основного документа
        transaction.update(docRef, { 
          xp: calculatedXp, 
          health: calculatedHealth,
          lastActionId: null, // Очищаємо ID останньої дії
          updatedAt: serverTimestamp(),
          level: (LEVELS.find(l => calculatedXp >= l.minXp && calculatedXp <= l.maxXp) || LEVELS[0]).name
        });

        // **КРИТИЧНЕ ВИПРАВЛЕННЯ:** Видалення запису історії в межах транзакції
        transaction.delete(historyDocRef);
      });
      
      setStatusMessage({ type: 'success', text: `Дія успішно відмінена: ${description}` });
      setLastActionId(null); // Оновлюємо локальний стан
      
    } catch (e) {
      // Перевіряємо, чи помилка не стосується відсутності документа, якщо ми вже його видалили
      if (e.message.includes("Основний документ Pupka не знайдено")) {
         console.error("Помилка транзакції відміни (документ не знайдено):", e);
         setStatusMessage({ type: 'error', text: 'Помилка відміни дії: основний стан не знайдено.' });
      } else {
        console.error("Помилка транзакції відміни:", e);
        setStatusMessage({ type: 'error', text: 'Помилка відміни дії. Перевірте консоль.' });
      }
    } finally {
      setIsSaving(false);
      setTimeout(() => setStatusMessage(null), 5000);
    }
  };


  // --- ФУНКЦІЯ: ЗБЕРЕЖЕННЯ BASE64 ЗОБРАЖЕННЯ ---
  const handleSaveBase64 = async (base64) => {
    // Блокування, якщо Пупка мертва
    if (isDead) {
        setStatusMessage({ type: 'warning', text: 'Пупка мертва. Не можна міняти фото, поки її не оживлять!' });
        return;
    }
    
    if (!db || userId === 'anon-local' || isSaving) return;
    
    setIsSaving(true);
    setStatusMessage({ type: 'info', text: 'Зберігаю зображення... Це може зайняти час.' });

    const docRef = getDocRef();
    try {
        await setDoc(docRef, { characterBase64: base64, updatedAt: serverTimestamp() }, { merge: true });
        setCharacterBase64(base64);
        setShowImageInput(false);
        setStatusMessage({ type: 'success', text: 'Зображення Пупки успішно оновлено!' });
        console.log("Base64 зображення оновлено.");
    } catch (e) {
        console.error("Помилка збереження Base64 зображення:", e);
        setStatusMessage({ type: 'error', text: 'Помилка збереження. Можливо, зображення занадто велике (ліміт Firestore 1МБ). Спробуйте менше.' });
    } finally {
        setIsSaving(false);
        setTimeout(() => setStatusMessage(null), 5000);
    }
  };
  
  // --- ФУНКЦІЯ: СКИДАННЯ ЗОБРАЖЕННЯ ---
  const handleRemoveImage = () => {
    // Блокування, якщо Пупка мертва
    if (isDead) {
        setStatusMessage({ type: 'warning', text: 'Пупка мертва. Не можна міняти фото, поки її не оживлять!' });
        return;
    }
    handleSaveBase64('');
    setShowImageInput(false);
  }

  // --- ФУНКЦІЯ: ПЕРЕСТВОРЕННЯ ПЕРСОНАЖА ---
  const handleResetCharacter = async () => {
    if (!db || userId === 'anon-local' || isSaving) {
      console.warn("Не можу скинути: DB не готова або вже зберігаю.");
      return;
    }

    setIsSaving(true);
    
    try {
        // 1. Оновлення основного документа (XP, Здоров'я, Base64)
        const docRef = getDocRef();
        await setDoc(docRef, { 
            xp: 0, 
            health: MAX_HEALTH,
            characterBase64: '', // Скидаємо Base64
            lastActionId: null, // Очищаємо
            updatedAt: serverTimestamp(),
            level: LEVELS[0].name,
        }, { merge: true });
        
        // 2. Видалення історії (Batch delete)
        const historyColRef = getHistoryColRef();
        const historySnapshot = await getDocs(historyColRef);
        
        const batch = writeBatch(db);
        historySnapshot.docs.forEach((d) => {
            batch.delete(d.ref);
        });
        
        await batch.commit();

        console.log("Персонаж успішно перестворений та історія очищена.");
        
        // Скидання локального стану форми та модалок
        setSelectedActivities([]);
        setHasMultiplier(false);
        setShowHealOptions(false);
        setShowPenaltyOptions(false);
        setShowResetModal(false); 
        setCharacterBase64(''); // Оновлення локального стану
        setLastActionId(null);
        setIsDead(false); // Зняття стану смерті
        setStatusMessage({ type: 'success', text: 'Персонаж успішно перестворений!' });

    } catch (e) {
        console.error("Помилка перестворення персонажа:", e);
        setStatusMessage({ type: 'error', text: 'Помилка перестворення.' });
    } finally {
        setIsSaving(false);
        setTimeout(() => setStatusMessage(null), 5000);
    }
  };

  // --- ЛОГІКА XP ---

  const handleXPUpdate = () => {
    // Блокування, якщо Пупка мертва
    if (isDead) {
        setStatusMessage({ type: 'warning', text: 'Пупка мертва. Потрібне «Штучне дихання» (42 км за 2 дні)!' });
        return;
    }
    
    if (selectedActivities.length === 0) return;

    let totalXP = selectedActivities.reduce((sum, activityId) => {
      const reward = REWARDS.find(r => r.id === activityId);
      return sum + (reward ? reward.xp : 0);
    }, 0);

    if (hasMultiplier) {
      totalXP *= MULTIPLIER.factor;
    }

    const description = `${selectedActivities.map(id => REWARDS.find(r => r.id === id)?.name || id).join(', ')}` + (hasMultiplier ? ` (×${MULTIPLIER.factor})` : '');

    updateGameState(totalXP, 0, `Отримано XP: +${totalXP}. Активності: ${description}`, 'update');

    setSelectedActivities([]);
    setHasMultiplier(false);
  };

  const toggleActivity = (id) => {
    // Блокування, якщо Пупка мертва
    if (isDead) return;
    
    setSelectedActivities(prev =>
      prev.includes(id) ? prev.filter(item => item !== id) : [...prev, id]
    );
  };

  // --- ЛОГІКА ЗДОРОВ'Я ---

  const handleHealthChange = (healthChange, xpChange, actionName, type) => {
    // Блокування, якщо Пупка мертва і це не лікування
    if (isDead && healthChange <= 0) { 
         setStatusMessage({ type: 'warning', text: 'Пупка мертва. Більше штрафів накладати не можна.' });
        return;
    }
    updateGameState(xpChange, healthChange, `${actionName}: ${healthChange > 0 ? '+' : ''}${healthChange} ❤️${xpChange !== 0 ? `, ${xpChange > 0 ? '+' : ''}${xpChange} XP` : ''}`, type);
    setShowHealOptions(false);
    setShowPenaltyOptions(false);
  };

  // Функція "Штучне дихання"
  const handleCPR = async () => {
      if (!isDead) return; 
      updateGameState(0, 'SET_TO_ONE', 'Опція «Штучне дихання» (42 км за 2 дні) виконана. Пупка ожила, але виснажена.', 'heal');
  };

  // --- UI КОМПОНЕНТИ ---

  const ImageUploader = () => {
    const [isPasting, setIsPasting] = useState(false);
    
    // Функція для перетворення вставленого файлу (зображення) на Base64
    const fileToBase64 = (file) => {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
        reader.readAsDataURL(file);
      });
    };

    // Обробник події "paste"
    const handlePaste = async (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      // Блокування, якщо Пупка мертва
      if (isDead) {
          setStatusMessage({ type: 'warning', text: 'Пупка мертва. Не можна міняти фото, поки її не оживлять!' });
          return;
      }
      
      setIsPasting(true);
      setStatusMessage({ type: 'info', text: 'Обробляю зображення... '});

      const items = (e.clipboardData || e.originalEvent.clipboardData).items;
      let imageFile = null;

      // Знайти вставлене зображення
      for (let i = 0; i < items.length; i++) {
        if (items[i].type.indexOf("image") !== -1) {
          imageFile = items[i].getAsFile();
          break;
        }
      }

      if (imageFile) {
        if (imageFile.size > 1024 * 1024) { // Перевірка на розмір 1МБ
             setStatusMessage({ type: 'error', text: 'Зображення занадто велике ( > 1МБ). Спробуйте менше.' });
             setIsPasting(false);
             return;
        }
        try {
          const base64Data = await fileToBase64(imageFile);
          handleSaveBase64(base64Data);
        } catch (error) {
          console.error("Помилка при конвертації Base64:", error);
          setStatusMessage({ type: 'error', text: 'Помилка при обробці зображення.' });
        }
      } else {
        setStatusMessage({ type: 'warning', text: 'Не вдалося знайти зображення у вставлених даних.' });
      }
      setIsPasting(false);
      setTimeout(() => setStatusMessage(null), 5000);
    };

    return (
      <div className="p-4 mt-4 bg-indigo-50 rounded-xl border border-indigo-300 space-y-3">
        <div className="flex justify-between items-center">
            <h4 className="font-semibold text-indigo-800 flex items-center">
                <ImageIcon className="w-5 h-5 mr-2"/> Вставити зображення (Ctrl+V)
            </h4>
            <button 
                onClick={() => setShowImageInput(false)} 
                className="text-gray-500 hover:text-gray-700"
                disabled={isDead} 
            >
                <XCircle className="w-5 h-5"/>
            </button>
        </div>
        
        {/* Поле для вставки */}
        <div
            ref={imageInputRef}
            onPaste={handlePaste}
            tabIndex="0" 
            className={`w-full p-4 h-24 border-2 border-dashed rounded-lg text-center cursor-text 
                        transition-all duration-200 
                        ${isPasting ? 'bg-indigo-200 border-indigo-600' : 'bg-white border-gray-300 hover:border-indigo-500'}
                        focus:outline-none focus:ring-2 focus:ring-indigo-500
                        ${isDead ? 'opacity-50 cursor-not-allowed' : ''}
                        `}
            style={{ pointerEvents: isDead ? 'none' : 'auto' }} 
        >
            <p className="text-gray-500 font-medium mt-2">
                {isPasting ? 'Очікую вставки...' : 'Натисніть тут і вставте зображення (Ctrl+V)'}
            </p>
        </div>

        {/* Кнопка скидання */}
        <Button
            onClick={handleRemoveImage}
            icon={Trash2}
            color="bg-red-500 hover:bg-red-600"
            disabled={isSaving || !characterBase64 || isDead}
            className="w-full"
        >
            Скинути фото Пупки
        </Button>
      </div>
    );
  };

  const XpInputSection = () => (
    <div className={`bg-white p-6 rounded-2xl shadow-xl space-y-4 ${isDead ? 'opacity-50 pointer-events-none' : ''}`}>
      <h3 className="text-xl font-bold text-gray-800 flex items-center"><Zap className="w-6 h-6 mr-2 text-indigo-600"/> Додати XP за Тренування</h3>
      
      {/* Множник X2 */}
      <label className="flex items-center space-x-3 p-3 bg-yellow-50 rounded-lg border border-yellow-300 cursor-pointer transition-all hover:bg-yellow-100">
        <input 
          type="checkbox" 
          checked={hasMultiplier} 
          onChange={() => setHasMultiplier(!hasMultiplier)} 
          className="form-checkbox h-5 w-5 text-indigo-600 rounded"
          disabled={isDead} 
        />
        <span className="font-semibold text-yellow-800">{MULTIPLIER.name}</span>
      </label>

      {/* Список активностей */}
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 max-h-96 overflow-y-auto pr-2">
        {REWARDS.map(reward => {
            let rewardName = reward.name;
            let rewardXp = reward.xp;
            
            if (reward.id === 'yoga') {
              rewardName = '🧘 Розтяжка / Йога (30 хв)'; 
            }
            
            return (
              <div 
                key={reward.id}
                onClick={() => toggleActivity(reward.id)}
                className={`p-3 rounded-lg border cursor-pointer transition-all ${
                  selectedActivities.includes(reward.id) 
                    ? 'bg-indigo-100 border-indigo-500 shadow-md' 
                    : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                } ${isDead ? 'opacity-70 cursor-not-allowed' : ''}`}
              >
                <div className="font-medium text-gray-700">{rewardName}</div>
                <div className={`text-sm font-bold ${reward.isBonus ? 'text-green-600' : 'text-indigo-600'}`}>+{rewardXp} XP</div>
              </div>
            );
          })}
      </div>
      
      {/* Кнопки Дії XP */}
      <div className="flex space-x-3 pt-2">
        {/* КНОПКА ВІДМІНИ / КРОК НАЗАД */}
        <Button 
          onClick={handleUndoLastAction} 
          icon={UndoIcon}
          disabled={!lastActionId || isSaving || isDead} 
          color="bg-orange-500 hover:bg-orange-600"
        >
          Крок назад
        </Button>
        
        {/* КНОПКА ЗАРАХУВАТИ XP */}
        <Button 
          onClick={handleXPUpdate} 
          icon={ChevronsUp}
          disabled={selectedActivities.length === 0 || isSaving || isDead} 
          color="bg-green-600 hover:bg-green-700 flex-grow"
        >
          Зарахувати XP
        </Button>
      </div>

    </div>
  );

  const StatusDisplay = () => {
    // Використовуємо Base64, якщо він встановлений, інакше стандартний URL
    const currentImageSrc = characterBase64 || DEFAULT_PUPKA_IMAGE_URL;

    return (
        <div className="bg-white p-6 rounded-2xl shadow-xl text-center space-y-4">
          <h1 className="text-3xl font-extrabold text-indigo-700">Пупка</h1>
          
          {/* Health Display */}
          <div className="flex justify-center mb-4">
            <HeartDisplay current={health} max={MAX_HEALTH} />
          </div>

          {/* Character Visualization (Pupka Image) */}
          <div 
            onClick={() => { if (!isDead) setShowImageInput(!showImageInput); }} 
            className={`w-28 h-28 mx-auto mb-4 rounded-full overflow-hidden shadow-xl border-4 border-indigo-200 transition-all duration-300 transform ${!isDead ? 'hover:scale-105 cursor-pointer' : 'opacity-70 cursor-not-allowed'}`}
            role="button"
            aria-label="Змінити зображення Пупки"
          >
            <img 
              src={currentImageSrc} 
              alt="Pupka Character" 
              className="w-full h-full object-cover"
              // Аварійний варіант, якщо зображення (URL або Base64) не завантажиться
              onError={(e) => {
                e.target.onerror = null; 
                e.target.src = 'https://placehold.co/112x112/ff9900/ffffff?text=Pupka';
                e.target.className = "w-full h-full object-contain p-2";
              }}
            />
          </div>
          
          {/* Поле вводу зображення */}
          {showImageInput && <ImageUploader />}


          {/* Evolution Level */}
          <div className="font-semibold text-lg text-gray-600 pt-4 border-t border-gray-100">
            Рівень {LEVELS.findIndex(l => l.name === currentLevel.name) + 1}
          </div>
          <h2 className="text-2xl font-bold text-indigo-600 mb-2">{currentLevel.name}</h2>
          <p className="text-sm italic text-gray-500">{currentLevel.description}</p>

          {/* XP Bar */}
          <div className="pt-2">
            <div className="text-sm font-medium text-gray-700 flex justify-between">
              <span>XP: {xp}</span>
              <span>{xpToNextLevel > 0 ? `До Наст. Рівня: ${xpToNextLevel}` : 'MAX'}</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-4 mt-1">
              <div 
                className={`h-4 rounded-full transition-all duration-700 ${xpProgress >= 100 ? 'bg-green-500' : 'bg-yellow-500'}`}
                style={{ width: `${xpProgress}%` }}
              ></div>
            </div>
          </div>
        </div>
    );
  };

  const ActionButtons = () => (
    <div className="bg-white p-6 rounded-2xl shadow-xl space-y-4">
      <h3 className="text-xl font-bold text-gray-800">Управління Здоров'ям (❤️)</h3>

      {/* Здоров'я = 0 */}
      {isDead && (
        <div className="p-4 bg-red-100 border border-red-400 rounded-xl text-red-800 font-semibold text-center space-y-3">
          <p className="font-bold text-lg">💀 Смерть Пупки!</p>
          <p>Потрібно виконати «Штучне дихання»!</p>
          <Button 
            onClick={handleCPR} 
            icon={RefreshCw}
            disabled={isSaving}
            color="bg-red-600 hover:bg-red-700"
          >
            42 км за 2 дні (Відновити 1 ❤️)
          </Button>
          <p className="text-sm text-red-600">Якщо не виконано, Пупка померла назавжди.</p>
        </div>
      )}

      {/* Кнопки Дії */}
      <div className={`grid grid-cols-2 gap-3 ${isDead ? 'opacity-50 pointer-events-none' : ''}`}>
        <Button 
          onClick={() => setShowHealOptions(!showHealOptions)} 
          icon={Heart}
          disabled={isSaving || isDead || health === MAX_HEALTH} 
          color="bg-pink-600 hover:bg-pink-700"
        >
          Лікування (+1 ❤️)
        </Button>
        <Button 
          onClick={() => setShowPenaltyOptions(!showPenaltyOptions)} 
          icon={XCircle}
          disabled={isSaving || isDead} 
          color="bg-gray-600 hover:bg-gray-700"
        >
          Штраф (— ❤️/XP)
        </Button>
      </div>

      {/* Панель Лікування */}
      {showHealOptions && !isDead && ( 
        <div className="p-4 bg-pink-50 rounded-xl border border-pink-300 space-y-2">
          <h4 className="font-semibold text-pink-800">Виконані Завдання для Лікування (+1 ❤️):</h4>
          {HEALING_TASKS.map(task => (
            <Button 
              key={task.id} 
              onClick={() => handleHealthChange(1, 0, `Лікування: ${task.name}`, 'heal')}
              icon={CheckCircle}
              disabled={isSaving || health === MAX_HEALTH}
              color="bg-pink-500 hover:bg-pink-600 w-full"
            >
              {task.name}
            </Button>
          ))}
          {/* Кнопка закриття опцій */}
           <Button 
              onClick={() => setShowHealOptions(false)}
              color="bg-gray-400 hover:bg-gray-500"
              className="w-full mt-2"
           >
              Закрити
           </Button>
        </div>
      )}

      {/* Панель Штрафів */}
      {showPenaltyOptions && !isDead && ( 
        <div className="p-4 bg-gray-50 rounded-xl border border-gray-300 space-y-2">
          <h4 className="font-semibold text-gray-800">Застосувати Штраф:</h4>
          {PENALTIES.map(penalty => (
            <Button 
              key={penalty.id} 
              onClick={() => handleHealthChange(penalty.health, penalty.xp, `Штраф: ${penalty.name}`, 'penalty')}
              icon={XCircle}
              disabled={isSaving}
              color="bg-red-500 hover:bg-red-600 w-full"
            >
              {penalty.name} ({penalty.health ? penalty.health + ' ❤️' : ''} {penalty.xp ? (penalty.xp > 0 ? '+' : '') + penalty.xp + ' XP' : ''})
            </Button>
          ))}
          {/* Кнопка закриття опцій */}
           <Button 
              onClick={() => setShowPenaltyOptions(false)}
              color="bg-gray-400 hover:bg-gray-500"
              className="w-full mt-2"
           >
              Закрити
           </Button>
        </div>
      )}

      {/* Кнопка Скидання/Перестворення (Завжди доступна) */}
      <div className="pt-4 border-t border-gray-200">
        <Button 
          onClick={() => setShowResetModal(true)} 
          icon={RotateCcw}
          disabled={isSaving}
          color="bg-red-500 hover:bg-red-600"
        >
          Перестворити персонажа (Скинути все)
        </Button>
      </div>

    </div>
  );

  const HistorySection = () => (
    <div className={`bg-white p-6 rounded-2xl shadow-xl space-y-4 col-span-1 lg:col-span-2 ${isDead ? 'opacity-50 pointer-events-none' : ''}`}>
      <h3 className="text-xl font-bold text-gray-800">Історія Прогресу (Останні 10)</h3>
      <div className="max-h-80 overflow-y-auto space-y-2 pr-2">
        {history.length === 0 ? (
          <p className="text-gray-500 italic">Тут відображатимуться ваші дії.</p>
        ) : (
          history.map((item) => {
            const healthStatus = item.details?.endHealth !== undefined && item.details.endHealth !== null
                ? ` (${item.details.endHealth}/${MAX_HEALTH} ❤️)`
                : ''; 
            
            // Виділення останньої дії
            const isLastAction = lastActionId === item.id;
            
            return (
              <div 
                key={item.id} 
                className={`p-3 rounded-lg border-l-4 shadow-sm flex justify-between items-center transition-all duration-300 ${
                    isLastAction 
                        ? 'border-orange-500 bg-orange-100' 
                        : 'border-indigo-500 bg-gray-50'
                }`}
              >
                <span className="text-gray-700 font-medium break-words w-4/5">
                    {isLastAction && <span className="font-extrabold text-orange-700 mr-1">[ОСТАННЯ]</span>}
                    {item.details?.description || item.type}
                    <span className="font-bold text-indigo-600">{healthStatus}</span>
                </span>
                <span className="text-xs text-gray-500 whitespace-nowrap flex items-center">
                  <Clock className="w-3 h-3 mr-1" />
                  {item.timestamp && item.timestamp.seconds ? new Date(item.timestamp.seconds * 1000).toLocaleTimeString('uk-UA', { day: '2-digit', month: 'short', hour: '2-digit', minute: '2-digit' }) : '...'}
                </span>
              </div>
            );
          })
        )}
      </div>
      <p className="text-xs text-center text-gray-400">ID Користувача: {userId || '...'} (Для спільного тренування)</p>
    </div>
  );
  
  // --- МОДАЛЬНЕ ВІКНО ПІДТВЕРДЖЕННЯ СКИНУТТЯ ---
  const ResetConfirmationModal = () => {
    if (!showResetModal) return null;

    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4">
        <div className="bg-white p-6 rounded-xl shadow-2xl max-w-sm w-full space-y-4">
          <h3 className="text-xl font-bold text-red-600">Підтвердження Перестворення</h3>
          <p className="text-gray-700">Ви впевнені, що хочете перестворити Пупку?</p>
          <p className="text-sm text-gray-500">Ця дія скине **XP, Здоров'я** та **повністю видалить історію**. Це не можна скасувати.</p>
          <div className="flex justify-end space-x-3">
            <Button 
              onClick={() => setShowResetModal(false)} 
              color="bg-gray-500 hover:bg-gray-600"
              disabled={isSaving}
            >
              Скасувати
            </Button>
            <Button 
              onClick={handleResetCharacter} 
              icon={RotateCcw}
              color="bg-red-600 hover:bg-red-700"
              disabled={isSaving}
            >
              {isSaving ? 'Скидаю...' : 'Перестворити'}
            </Button>
          </div>
        </div>
      </div>
    );
  };

  // --- UI ДЛЯ СТАТУСНИХ ПОВІДОМЛЕНЬ ---
  const StatusAlert = () => {
    if (!statusMessage) return null;
    
    let colorClass, Icon;
    switch (statusMessage.type) {
        case 'success':
            colorClass = 'bg-green-100 text-green-800 border-green-400';
            Icon = CheckCircle;
            break;
        case 'error':
            colorClass = 'bg-red-100 text-red-800 border-red-400';
            Icon = XCircle;
            break;
        case 'warning':
            colorClass = 'bg-yellow-100 text-yellow-800 border-yellow-400';
            Icon = Zap;
            break;
        case 'info':
        default:
            colorClass = 'bg-blue-100 text-blue-800 border-blue-400';
            Icon = RefreshCw;
            break;
    }

    return (
        <div className={`fixed bottom-4 right-4 z-50 p-4 rounded-xl shadow-lg border-l-4 font-semibold max-w-xs ${colorClass} flex items-center`}>
            <Icon className={`w-5 h-5 mr-3 ${statusMessage.type === 'info' ? 'animate-spin' : ''}`} />
            {statusMessage.text}
        </div>
    );
  };

  // --- ГОЛОВНИЙ РЕНДЕР ---

  if (!isAuthReady) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <div className="text-indigo-600 text-lg font-semibold flex items-center">
          <RefreshCw className="w-6 h-6 mr-3 animate-spin" /> Завантаження Пупки...
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 sm:p-8 font-sans">
      <script src="https://cdn.tailwindcss.com"></script>
      <div className="max-w-4xl mx-auto space-y-8">
        
        {/* Хедер і Статус */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="md:col-span-1">
            <StatusDisplay />
          </div>
          {/* XP (На першому місці у правій колонці) */}
          <div className="md:col-span-2">
            <XpInputSection />
          </div>
        </div>

        {/* Секція Дій та Історія */}
        <div className="grid grid-cols-1 lg:col-span-2 gap-6">
            <ActionButtons />
            <HistorySection />
        </div>
        
      </div>
      
      <ResetConfirmationModal /> 
      <StatusAlert />
    </div>
  );
};

export default App;
